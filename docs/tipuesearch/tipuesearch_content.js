var tipuesearch = {"pages":[{"loc":"index.html","tags":"","text":"Minimum FORD example Description This is a minimum working example using internal functions and interfaces that shows a graphviz-related bug FORD. It is related to FORD Issue 193 Building documentation To build the documentation, execute the following command: make docs Developer Info Chris Coutinho","title":" Minimum FORD example "},{"loc":"sourcefile/main.f90.html","tags":"","text":"This File Depends On sourcefile~~main.f90~~EfferentGraph sourcefile~main.f90 main.f90 sourcefile~square.f90 square.f90 sourcefile~square.f90->sourcefile~main.f90 sourcefile~external.f90 external.f90 sourcefile~square.f90->sourcefile~external.f90 sourcefile~external.f90->sourcefile~main.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Programs main Source Code main.f90 Source Code program main use iso_fortran_env , only : wp => real64 ! use square, only: fun_interf, & !                 & squareFun, & !                 & square_local ! use external, only: squareWrapperExternal use square use external implicit none real ( wp ) :: x ( 5 ) = [ 1. , 2. , 3. , 4. , 5. ] real ( wp ) :: y ( 5 ) ! Call squareFun directly y = squareFun ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using a 'local' wrapper, which exists in same module y = square_local ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an internal wrapper that calls squareFun directly call squareWrapperInternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an external wrapper that calls squareFun directly call squareWrapperExternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Send squareFun to a 'general' function wrapper - uses a procedure interface call funWrapper ( squareFun , x , y ) print '(1x,5(1x,f6.2))' , y contains subroutine funWrapper ( myfun , x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y procedure ( fun_interf ) :: myfun y = executeFun ( myfun , x ) return end subroutine funWrapper function executeFun ( myfun , x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y procedure ( fun_interf ) :: myfun y = myfun ( x ) return end function executeFun subroutine squareWrapperInternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperInternal end program main","title":"main.f90 – Minimum FORD example"},{"loc":"sourcefile/square.f90.html","tags":"","text":"Files Dependent On This One sourcefile~~square.f90~~AfferentGraph sourcefile~square.f90 square.f90 sourcefile~main.f90 main.f90 sourcefile~square.f90->sourcefile~main.f90 sourcefile~main_ex.f90 main_ex.f90 sourcefile~square.f90->sourcefile~main_ex.f90 sourcefile~external_ex.f90 external_ex.f90 sourcefile~square.f90->sourcefile~external_ex.f90 sourcefile~external.f90 external.f90 sourcefile~square.f90->sourcefile~external.f90 sourcefile~external_ex.f90->sourcefile~main_ex.f90 sourcefile~external.f90->sourcefile~main.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules square Source Code square.f90 Source Code module square use iso_fortran_env , only : wp => real64 implicit none interface function fun_interf ( x ) result ( y ) import wp real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y end function end interface contains function square_local ( x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y y = squareFun ( x ) return end function square_local function squareFun ( x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y y = x * x return end function squareFun end module square","title":"square.f90 – Minimum FORD example"},{"loc":"sourcefile/external.f90.html","tags":"","text":"This File Depends On sourcefile~~external.f90~~EfferentGraph sourcefile~external.f90 external.f90 sourcefile~square.f90 square.f90 sourcefile~square.f90->sourcefile~external.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files Dependent On This One sourcefile~~external.f90~~AfferentGraph sourcefile~external.f90 external.f90 sourcefile~main.f90 main.f90 sourcefile~external.f90->sourcefile~main.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules external Source Code external.f90 Source Code module external use iso_fortran_env , only : wp => real64 use square implicit none contains subroutine squareWrapperExternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperExternal end module external","title":"external.f90 – Minimum FORD example"},{"loc":"sourcefile/external_ex.f90.html","tags":"","text":"This File Depends On sourcefile~~external_ex.f90~~EfferentGraph sourcefile~external_ex.f90 external_ex.f90 sourcefile~square.f90 square.f90 sourcefile~square.f90->sourcefile~external_ex.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files Dependent On This One sourcefile~~external_ex.f90~~AfferentGraph sourcefile~external_ex.f90 external_ex.f90 sourcefile~main_ex.f90 main_ex.f90 sourcefile~external_ex.f90->sourcefile~main_ex.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules external_ex Source Code external_ex.f90 Source Code module external_ex use iso_fortran_env , only : wp => real64 use square , only : squareFun implicit none contains subroutine squareWrapperExternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperExternal end module external_ex","title":"external_ex.f90 – Minimum FORD example"},{"loc":"sourcefile/main_ex.f90.html","tags":"","text":"This File Depends On sourcefile~~main_ex.f90~~EfferentGraph sourcefile~main_ex.f90 main_ex.f90 sourcefile~square.f90 square.f90 sourcefile~square.f90->sourcefile~main_ex.f90 sourcefile~external_ex.f90 external_ex.f90 sourcefile~square.f90->sourcefile~external_ex.f90 sourcefile~external_ex.f90->sourcefile~main_ex.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Programs main_ex Source Code main_ex.f90 Source Code program main_ex use iso_fortran_env , only : wp => real64 use square , only : fun_interf , & & squareFun , & & square_local use external_ex , only : squareWrapperExternal implicit none real ( wp ) :: x ( 5 ) = [ 1. , 2. , 3. , 4. , 5. ] real ( wp ) :: y ( 5 ) ! Call squareFun directly y = squareFun ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using a 'local' wrapper, which exists in same module y = square_local ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an internal wrapper that calls squareFun directly call squareWrapperInternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an external wrapper that calls squareFun directly call squareWrapperExternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Send squareFun to a 'general' function wrapper - uses a procedure interface call funWrapper ( squareFun , x , y ) print '(1x,5(1x,f6.2))' , y contains subroutine funWrapper ( myfun , x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y procedure ( fun_interf ) :: myfun y = executeFun ( myfun , x ) return end subroutine funWrapper function executeFun ( myfun , x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y procedure ( fun_interf ) :: myfun y = myfun ( x ) return end function executeFun subroutine squareWrapperInternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperInternal end program main_ex","title":"main_ex.f90 – Minimum FORD example"},{"loc":"proc/executefun.html","tags":"","text":"function executeFun(myfun, x) result(y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Called By proc~~executefun~~CalledByGraph proc~executefun executeFun proc~funwrapper funWrapper proc~funwrapper->proc~executefun program~main main program~main->proc~funwrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code executeFun Source Code function executeFun ( myfun , x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y procedure ( fun_interf ) :: myfun y = myfun ( x ) return end function executeFun","title":"executeFun – Minimum FORD example"},{"loc":"proc/funwrapper.html","tags":"","text":"subroutine funWrapper(myfun, x, y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Calls proc~~funwrapper~~CallsGraph proc~funwrapper funWrapper proc~executefun executeFun proc~funwrapper->proc~executefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called By proc~~funwrapper~~CalledByGraph proc~funwrapper funWrapper program~main main program~main->proc~funwrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code funWrapper Source Code subroutine funWrapper ( myfun , x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y procedure ( fun_interf ) :: myfun y = executeFun ( myfun , x ) return end subroutine funWrapper","title":"funWrapper – Minimum FORD example"},{"loc":"proc/squarewrapperinternal.html","tags":"","text":"subroutine squareWrapperInternal(x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Calls proc~~squarewrapperinternal~~CallsGraph proc~squarewrapperinternal squareWrapperInternal proc~squarefun squareFun proc~squarewrapperinternal->proc~squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called By proc~~squarewrapperinternal~~CalledByGraph proc~squarewrapperinternal squareWrapperInternal program~main main program~main->proc~squarewrapperinternal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code squareWrapperInternal Source Code subroutine squareWrapperInternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperInternal","title":"squareWrapperInternal – Minimum FORD example"},{"loc":"proc/square_local.html","tags":"","text":"public function square_local(x) result(y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Calls proc~~square_local~~CallsGraph proc~square_local square_local proc~squarefun squareFun proc~square_local->proc~squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called By proc~~square_local~~CalledByGraph proc~square_local square_local program~main main program~main->proc~square_local program~main_ex main_ex program~main_ex->proc~square_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code square_local Source Code function square_local ( x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y y = squareFun ( x ) return end function square_local","title":"square_local – Minimum FORD example"},{"loc":"proc/squarefun.html","tags":"","text":"public function squareFun(x) result(y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Called By proc~~squarefun~~CalledByGraph proc~squarefun squareFun program~main main program~main->proc~squarefun proc~squarewrapperinternal squareWrapperInternal program~main->proc~squarewrapperinternal proc~square_local square_local program~main->proc~square_local proc~squarewrapperexternal squareWrapperExternal program~main->proc~squarewrapperexternal proc~squarewrapperinternal->proc~squarefun proc~square_local->proc~squarefun proc~squarewrapperexternal->proc~squarefun program~main_ex main_ex program~main_ex->proc~square_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code squareFun Source Code function squareFun ( x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y y = x * x return end function squareFun","title":"squareFun – Minimum FORD example"},{"loc":"interface/fun_interf.html","tags":"","text":"interface public function fun_interf(x) result(y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x))","title":"fun_interf – Minimum FORD example"},{"loc":"proc/squarewrapperexternal.html","tags":"","text":"public subroutine squareWrapperExternal(x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Calls proc~~squarewrapperexternal~~CallsGraph proc~squarewrapperexternal squareWrapperExternal proc~squarefun squareFun proc~squarewrapperexternal->proc~squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called By proc~~squarewrapperexternal~~CalledByGraph proc~squarewrapperexternal squareWrapperExternal program~main main program~main->proc~squarewrapperexternal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code squareWrapperExternal Source Code subroutine squareWrapperExternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperExternal","title":"squareWrapperExternal – Minimum FORD example"},{"loc":"proc/squarewrapperexternal~2.html","tags":"","text":"public subroutine squareWrapperExternal(x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Calls proc~~squarewrapperexternal~2~~CallsGraph proc~squarewrapperexternal~2 squareWrapperExternal squarefun squarefun proc~squarewrapperexternal~2->squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code squareWrapperExternal Source Code subroutine squareWrapperExternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperExternal","title":"squareWrapperExternal – Minimum FORD example"},{"loc":"proc/executefun~2.html","tags":"","text":"function executeFun(myfun, x) result(y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Called By proc~~executefun~2~~CalledByGraph proc~executefun~2 executeFun proc~funwrapper~2 funWrapper proc~funwrapper~2->proc~executefun~2 program~main_ex main_ex program~main_ex->proc~funwrapper~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code executeFun Source Code function executeFun ( myfun , x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y procedure ( fun_interf ) :: myfun y = myfun ( x ) return end function executeFun","title":"executeFun – Minimum FORD example"},{"loc":"proc/funwrapper~2.html","tags":"","text":"subroutine funWrapper(myfun, x, y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Calls proc~~funwrapper~2~~CallsGraph proc~funwrapper~2 funWrapper proc~executefun~2 executeFun proc~funwrapper~2->proc~executefun~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called By proc~~funwrapper~2~~CalledByGraph proc~funwrapper~2 funWrapper program~main_ex main_ex program~main_ex->proc~funwrapper~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code funWrapper Source Code subroutine funWrapper ( myfun , x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y procedure ( fun_interf ) :: myfun y = executeFun ( myfun , x ) return end subroutine funWrapper","title":"funWrapper – Minimum FORD example"},{"loc":"proc/squarewrapperinternal~2.html","tags":"","text":"subroutine squareWrapperInternal(x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Calls proc~~squarewrapperinternal~2~~CallsGraph proc~squarewrapperinternal~2 squareWrapperInternal squarefun squarefun proc~squarewrapperinternal~2->squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called By proc~~squarewrapperinternal~2~~CalledByGraph proc~squarewrapperinternal~2 squareWrapperInternal program~main_ex main_ex program~main_ex->proc~squarewrapperinternal~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Source Code squareWrapperInternal Source Code subroutine squareWrapperInternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperInternal","title":"squareWrapperInternal – Minimum FORD example"},{"loc":"module/square.html","tags":"","text":"Uses: iso_fortran_env module~~square~~UsesGraph module~square square iso_fortran_env iso_fortran_env iso_fortran_env->module~square Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~square~~UsedByGraph module~square square program~main main module~square->program~main module~external external module~square->module~external program~main_ex main_ex module~square->program~main_ex module~external_ex external_ex module~square->module~external_ex module~external->program~main module~external_ex->program~main_ex Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Interfaces fun_interf Functions square_local squareFun Interfaces interface public function fun_interf (x) result(y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Functions public function square_local (x) result(y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) public function squareFun (x) result(y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x))","title":"square – Minimum FORD example"},{"loc":"module/external.html","tags":"","text":"Uses: iso_fortran_env square module~~external~~UsesGraph module~external external iso_fortran_env iso_fortran_env iso_fortran_env->module~external module~square square iso_fortran_env->module~square module~square->module~external Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~external~~UsedByGraph module~external external program~main main module~external->program~main Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Subroutines squareWrapperExternal Subroutines public subroutine squareWrapperExternal (x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y","title":"external – Minimum FORD example"},{"loc":"module/external_ex.html","tags":"","text":"Uses: iso_fortran_env square module~~external_ex~~UsesGraph module~external_ex external_ex iso_fortran_env iso_fortran_env iso_fortran_env->module~external_ex module~square square iso_fortran_env->module~square module~square->module~external_ex Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~external_ex~~UsedByGraph module~external_ex external_ex program~main_ex main_ex module~external_ex->program~main_ex Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Subroutines squareWrapperExternal Subroutines public subroutine squareWrapperExternal (x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y","title":"external_ex – Minimum FORD example"},{"loc":"program/main.html","tags":"","text":"Uses: iso_fortran_env square external program~~main~~UsesGraph program~main main iso_fortran_env iso_fortran_env iso_fortran_env->program~main module~external external iso_fortran_env->module~external module~square square iso_fortran_env->module~square module~external->program~main module~square->program~main module~square->module~external Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Calls program~~main~~CallsGraph program~main main proc~squarefun squareFun program~main->proc~squarefun proc~squarewrapperinternal squareWrapperInternal program~main->proc~squarewrapperinternal proc~funwrapper funWrapper program~main->proc~funwrapper proc~square_local square_local program~main->proc~square_local proc~squarewrapperexternal squareWrapperExternal program~main->proc~squarewrapperexternal proc~squarewrapperinternal->proc~squarefun proc~executefun executeFun proc~funwrapper->proc~executefun proc~square_local->proc~squarefun proc~squarewrapperexternal->proc~squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Variables x y Functions executeFun Subroutines funWrapper squareWrapperInternal Source Code main Variables Type Attributes Name Initial real(kind=wp) :: x (5) = [1., 2., 3., 4., 5.] real(kind=wp) :: y (5) Functions function executeFun (myfun, x) result(y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Subroutines subroutine funWrapper (myfun, x, y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y subroutine squareWrapperInternal (x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Source Code program main use iso_fortran_env , only : wp => real64 ! use square, only: fun_interf, & !                 & squareFun, & !                 & square_local ! use external, only: squareWrapperExternal use square use external implicit none real ( wp ) :: x ( 5 ) = [ 1. , 2. , 3. , 4. , 5. ] real ( wp ) :: y ( 5 ) ! Call squareFun directly y = squareFun ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using a 'local' wrapper, which exists in same module y = square_local ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an internal wrapper that calls squareFun directly call squareWrapperInternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an external wrapper that calls squareFun directly call squareWrapperExternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Send squareFun to a 'general' function wrapper - uses a procedure interface call funWrapper ( squareFun , x , y ) print '(1x,5(1x,f6.2))' , y contains subroutine funWrapper ( myfun , x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y procedure ( fun_interf ) :: myfun y = executeFun ( myfun , x ) return end subroutine funWrapper function executeFun ( myfun , x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y procedure ( fun_interf ) :: myfun y = myfun ( x ) return end function executeFun subroutine squareWrapperInternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperInternal end program main","title":"main – Minimum FORD example"},{"loc":"program/main_ex.html","tags":"","text":"Uses: iso_fortran_env square external_ex program~~main_ex~~UsesGraph program~main_ex main_ex iso_fortran_env iso_fortran_env iso_fortran_env->program~main_ex module~square square iso_fortran_env->module~square module~external_ex external_ex iso_fortran_env->module~external_ex module~square->program~main_ex module~square->module~external_ex module~external_ex->program~main_ex Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Calls program~~main_ex~~CallsGraph program~main_ex main_ex squarefun squarefun program~main_ex->squarefun squarewrapperexternal squarewrapperexternal program~main_ex->squarewrapperexternal proc~funwrapper~2 funWrapper program~main_ex->proc~funwrapper~2 proc~square_local square_local program~main_ex->proc~square_local proc~squarewrapperinternal~2 squareWrapperInternal program~main_ex->proc~squarewrapperinternal~2 proc~executefun~2 executeFun proc~funwrapper~2->proc~executefun~2 proc~squarefun squareFun proc~square_local->proc~squarefun proc~squarewrapperinternal~2->squarefun Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Variables x y Functions executeFun Subroutines funWrapper squareWrapperInternal Source Code main_ex Variables Type Attributes Name Initial real(kind=wp) :: x (5) = [1., 2., 3., 4., 5.] real(kind=wp) :: y (5) Functions function executeFun (myfun, x) result(y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(size(x)) Subroutines subroutine funWrapper (myfun, x, y) Arguments Type Intent Optional Attributes Name procedure( fun_interf ) :: myfun real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y subroutine squareWrapperInternal (x, y) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(out), dimension(:) :: y Source Code program main_ex use iso_fortran_env , only : wp => real64 use square , only : fun_interf , & & squareFun , & & square_local use external_ex , only : squareWrapperExternal implicit none real ( wp ) :: x ( 5 ) = [ 1. , 2. , 3. , 4. , 5. ] real ( wp ) :: y ( 5 ) ! Call squareFun directly y = squareFun ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using a 'local' wrapper, which exists in same module y = square_local ( x ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an internal wrapper that calls squareFun directly call squareWrapperInternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Call squareFun using an external wrapper that calls squareFun directly call squareWrapperExternal ( x , y ) print '(1x,5(1x,f6.2))' , y ! Send squareFun to a 'general' function wrapper - uses a procedure interface call funWrapper ( squareFun , x , y ) print '(1x,5(1x,f6.2))' , y contains subroutine funWrapper ( myfun , x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y procedure ( fun_interf ) :: myfun y = executeFun ( myfun , x ) return end subroutine funWrapper function executeFun ( myfun , x ) result ( y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), dimension ( size ( x )) :: y procedure ( fun_interf ) :: myfun y = myfun ( x ) return end function executeFun subroutine squareWrapperInternal ( x , y ) real ( wp ), intent ( in ), dimension (:) :: x real ( wp ), intent ( out ), dimension (:) :: y y = squareFun ( x ) return end subroutine squareWrapperInternal end program main_ex","title":"main_ex – Minimum FORD example"}]}